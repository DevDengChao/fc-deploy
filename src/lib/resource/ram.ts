import { RamComponent } from '../component/ram';
import { AlicloudClient } from './client';
import { replaceProjectName } from '../profile';
import { generateResourceName } from '../utils/utils';
import _ from 'lodash';
import { FC_DEFAULT_ROLE } from '../static';
import logger from '../../common/logger';
import * as core from '@serverless-devs/core';

export interface RoleConfig {
  name?: string;
  policies?: Array<string | CustomPolicyConfig>;
}

export interface CustomPolicyConfig {
  name: string;
  description?: string;
  statement: PolicyStatementConfig[];
}

export interface PolicyStatementConfig {
  Effect: 'Allow' | 'Deny';
  Action: string[];
  Resource: string[] | string;
  Condition?: any;
}

function normalizeRoleOrPoliceName(roleName: string): string {
  return roleName.replace(/_/g, '-');
}

const RAM_NAME_MAX_LENGTH = 64;

export function generateRamResourceName(prefix: string, name: string, accountID) {
  const policeName = normalizeRoleOrPoliceName(`${prefix}${name}`);
  const maxNameLeng = RAM_NAME_MAX_LENGTH - prefix.length;
  if (name.length > maxNameLeng) {
    return generateResourceName(name, prefix, accountID);
  }

  return policeName;
}

export function isAutoGeneratedRole(role: any): boolean {
  if (!role || !_.isString(role)) {
    return false;
  }
  const roleName: string = extractRoleNameFromArn(role);
  return _.toLower(roleName) === _.toLower(FC_DEFAULT_ROLE);
}

export class AlicloudRam extends AlicloudClient {
  genRamComponentProp(
    roleName: string,
    resourceName?: string,
    assumeRolePolicy?: any,
    attachedPolicies?: Array<string | CustomPolicyConfig>,
    description?: string,
  ): any {
    const prop = Object.assign(
      {},
      {
        name: roleName,
        description,
        policies: attachedPolicies,
      },
    );
    if (assumeRolePolicy) {
      Object.assign(prop, {
        statement: assumeRolePolicy,
      });
    } else if (resourceName) {
      Object.assign(prop, {
        service: resourceName,
      });
    }
    return prop;
  }

  async makeRole(
    roleName: string,
    serviceName: string,
    args?: string,
    description?: string,
    resourceName?: string,
    assumeRolePolicy?: any,
    attachedPolicies?: Array<string | CustomPolicyConfig>,
  ): Promise<string> {
    const profileOfRam = replaceProjectName(
      this.serverlessProfile,
      `${this.serverlessProfile?.project?.projectName}-ram-project`,
    );
    const ramComponent = new RamComponent(
      profileOfRam,
      {
        roleName,
        resourceName,
        assumeRolePolicy,
        attachedPolicies,
        description,
        serviceName,
      },
      this.region,
      this.credentials,
      this.curPath,
    );
    const ramComponentInputs = ramComponent.genComponentInputs('ram', args);
    logger.spinner?.stop();
    const ramComponentIns = await core.loadComponent('devsapp/ram');
    logger.spinner?.start();
    const roleArn = await ramComponentIns.deploy(ramComponentInputs);
    return roleArn;
  }

  async checkRoleExist({ arn }): Promise<any> {
    const roleName = extractRoleNameFromArn(arn);
    const ramComponent = new RamComponent(
      this.serverlessProfile,
      { roleName } as any,
      this.region,
      this.credentials,
      this.curPath,
    );
    const ramComponentInputs = ramComponent.genComponentInputs('ram', '');
    logger.spinner?.stop();
    const ramComponentIns = await core.loadComponent('devsapp/ram');
    logger.spinner?.start();
    const roleExist = await ramComponentIns.check(ramComponentInputs);
    this.logger.debug(`roleExist: ${roleExist}`);
    return roleExist;
  }
}

export function extractRoleNameFromArn(roleArn: string): string {
  checkRoleArnFormat(roleArn);
  return roleArn.match(/acs:ram::[0-9]+:role\/(\S*)/)[1];
}

export function checkRoleArnFormat(roleArn: string): void {
  if (!/^acs:ram::[0-9]*:role\/.*$/.test(roleArn)) {
    throw new Error(
      `Invalid format of role arn: ${roleArn}, it should satisfy reg '^acs:ram::[0-9]*:role/.*$'.eg: acs:ram::123456:role/aliyunfcdefaultrole`,
    );
  }
}
